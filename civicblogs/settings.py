"""
Django settings for civicblogs project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
from supabase import create_client, Client

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-=n2rjlejn(@)^v8gya20fx4rcm+m8j=k1ws)h1mstz-=0_i7s5')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# Production hosts - should be configured via environment variables
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,*.azurewebsites.net', cast=lambda v: [s.strip() for s in v.split(',')])

# Supabase configuration
SUPABASE_URL = config('SUPABASE_URL')
SUPABASE_KEY = config('SUPABASE_KEY')
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'csp',
    'taggit',
    'ckeditor',
    'ckeditor_uploader',
    'blog',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add WhiteNoise for static files
    'csp.middleware.CSPMiddleware',  # Content Security Policy
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'civicblogs.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'civicblogs.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration with fallback support
USE_POSTGRES = config('USE_POSTGRES', default=False, cast=bool)

if USE_POSTGRES:
    # Try different Supabase connection methods
    try:
        import dj_database_url
        # Use direct database URL first
        DATABASE_URL = config('DATABASE_URL', default='postgresql://postgres.beeydumbrvtrllpmmlos:YY_h025194166@aws-1-ap-southeast-1.pooler.supabase.com:5432/postgres')
        DATABASES = {
            'default': dj_database_url.parse(DATABASE_URL, conn_max_age=600)
        }
    except ImportError:
        # Fallback to manual configuration
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'postgres',
                'USER': 'postgres',
                'PASSWORD': config('DATABASE_PASSWORD', default='YY_h025194166'),
                'HOST': config('DATABASE_HOST', default='aws-1-ap-southeast-1.pooler.supabase.com'),
                'PORT': config('DATABASE_PORT', default='5432'),
                'OPTIONS': {
                    'sslmode': 'require',
                    'connect_timeout': 30,
                },
                'CONN_MAX_AGE': 600,
            }
        }
else:
    # SQLite fallback for local development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Alternative: Use DATABASE_URL for easier deployment
try:
    import dj_database_url
    DATABASE_URL = config('DATABASE_URL', default=None)
    if DATABASE_URL:
        DATABASES = {
            'default': dj_database_url.parse(DATABASE_URL)
        }
except ImportError:
    pass  # dj_database_url not installed


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# WhiteNoise configuration for efficient static file serving
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default STORAGES setting (required for Django 4.2+)
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# Azure Blob Storage settings for production
try:
    USE_AZURE_STORAGE = config('USE_AZURE_STORAGE', default=False, cast=bool)
    if USE_AZURE_STORAGE:
        # Try Connection String first
        AZURE_CONNECTION_STRING = config('AZURE_STORAGE_CONNECTION_STRING', default=None)
        
        if AZURE_CONNECTION_STRING:
            # Use Connection String method
            AZURE_STORAGE_CONNECTION_STRING = AZURE_CONNECTION_STRING
            AZURE_CONTAINER = config('AZURE_STORAGE_CONTAINER_NAME', default='media')
            
            # Extract account name for URL
            AZURE_ACCOUNT_NAME = config('AZURE_STORAGE_ACCOUNT_NAME')
            AZURE_CUSTOM_DOMAIN = f'{AZURE_ACCOUNT_NAME}.blob.core.windows.net'
            MEDIA_URL = f'https://{AZURE_CUSTOM_DOMAIN}/{AZURE_CONTAINER}/'
            
            # Override default storage with Azure Storage
            STORAGES["default"] = {
                "BACKEND": "storages.backends.azure_storage.AzureStorage",
            }
            
            print(f"✅ Azure Blob Storage configured with Connection String: {MEDIA_URL}")
        else:
            # Fallback to individual settings
            AZURE_ACCOUNT_NAME = config('AZURE_STORAGE_ACCOUNT_NAME')
            AZURE_ACCOUNT_KEY = config('AZURE_STORAGE_ACCOUNT_KEY')
            AZURE_CONTAINER = config('AZURE_STORAGE_CONTAINER_NAME', default='media')
            
            AZURE_CUSTOM_DOMAIN = f'{AZURE_ACCOUNT_NAME}.blob.core.windows.net'
            MEDIA_URL = f'https://{AZURE_CUSTOM_DOMAIN}/{AZURE_CONTAINER}/'
            
            # Override default storage with Azure Storage
            STORAGES["default"] = {
                "BACKEND": "storages.backends.azure_storage.AzureStorage",
            }
            
            print(f"✅ Azure Blob Storage configured with Account Key: {MEDIA_URL}")
        
        # Test Azure Storage connection
        try:
            from storages.backends.azure_storage import AzureStorage
            test_storage = AzureStorage()
            print(f"✅ Azure Storage test connection successful: {test_storage.account_name}")
        except Exception as storage_error:
            print(f"❌ Azure Storage connection test failed: {storage_error}")
            # Fallback to local storage if Azure fails
            STORAGES["default"] = {
                "BACKEND": "django.core.files.storage.FileSystemStorage",
            }
            MEDIA_URL = '/media/'
            
except Exception as e:
    print(f"⚠️  Azure Blob Storage configuration failed: {e}")
    # Ensure STORAGES is using local storage as fallback
    STORAGES["default"] = {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    }

# Security settings for production
if not DEBUG:
    # HTTPS and SSL settings
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_PRELOAD = True
    SECURE_REDIRECT_EXEMPT = []
    # Disable SSL redirect for Azure App Service (Azure handles SSL termination)
    SECURE_SSL_REDIRECT = False
    # Azure App Service proxy headers
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    
    # Cookie security
    SESSION_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Lax'
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True
    CSRF_COOKIE_SAMESITE = 'Lax'
    
    # Content security
    X_FRAME_OPTIONS = 'DENY'
    SECURE_REFERRER_POLICY = 'same-origin'
    SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'
    
    # Content Security Policy (relaxed for CKEditor)
    CSP_DEFAULT_SRC = ("'self'", "'unsafe-inline'", "'unsafe-eval'", 'https:', 'data:')
    CSP_SCRIPT_SRC = ("'self'", "'unsafe-inline'", "'unsafe-eval'", 
                      'https://cdn.tailwindcss.com',
                      'https://cdnjs.cloudflare.com',
                      'https://fonts.googleapis.com')
    CSP_STYLE_SRC = ("'self'", "'unsafe-inline'",
                     'https://cdn.tailwindcss.com',
                     'https://cdnjs.cloudflare.com',
                     'https://fonts.googleapis.com',
                     'https://fonts.gstatic.com')
    CSP_FONT_SRC = ("'self'", 'data:',
                    'https://fonts.gstatic.com',
                    'https://cdnjs.cloudflare.com')
    CSP_IMG_SRC = ("'self'", 'data:', 'https:', 'http:', 'blob:')
    CSP_CONNECT_SRC = ("'self'", 'https:')
    CSP_FRAME_SRC = ("'self'",)
    CSP_MEDIA_SRC = ("'self'", 'https:', 'data:')
else:
    # Development security settings (more lenient)
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'SAMEORIGIN'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

CORS_ALLOW_ALL_ORIGINS = DEBUG

# CKEditor Configuration
CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_RESTRICT_BY_USER = True
CKEDITOR_BROWSE_SHOW_DIRS = True

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
        'height': 500,
        'width': '100%',
        'resize_enabled': True,
        'tabSpaces': 4,
        'extraPlugins': ','.join([
            'uploadimage',
            'div',
            'autolink',
            'autoembed',
            'embedsemantic',
            'autogrow',
            'widget',
            'lineutils',
            'clipboard',
            'dialog',
            'dialogui',
            'elementspath'
        ]),
        'removePlugins': '',
        'allowedContent': True,
        'fillEmptyBlocks': True,
        'entities': False,
        'basicEntities': False,
        'entities_greek': False,
        'entities_latin': False,
        'format_tags': 'p;h1;h2;h3;h4;h5;h6;pre;address;div',
        'colorButton_colors': '000,800000,8B4513,2F4F4F,008080,000080,4B0082,696969,B22222,A52A2A,DAA520,006400,40E0D0,0000CD,800080,808080,F00,FF8C00,FFD700,008000,0FF,00F,EE82EE,A9A9A9,FFA07A,98FB98,87CEEB,778899,B0C4DE,FFFFE0,00FFFF,F0E68C,E6E6FA,FFF',
        'format_p': {
            'element': 'p',
            'attributes': {'style': 'margin: 0; padding: 0 0 1em 0;'}
        },
    },
}

# Internationalization
LANGUAGE_CODE = 'th-th'
TIME_ZONE = 'Asia/Bangkok'
